import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.owasp.dependencycheck.reporting.ReportGenerator

plugins {
    id 'org.springframework.boot' version '2.4.0'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id "name.remal.sonarlint" version "1.3.1"
    id 'com.github.spotbugs' version '4.4.4'
    id 'signing'
    id 'jacoco'
    id 'org.sonarqube' version '3.1.1'
    id 'com.github.johnrengelman.processes' version '0.5.0'
    id 'org.owasp.dependencycheck' version '6.2.2'
    id "com.gorylenko.gradle-git-properties" version "2.4.0"
}

ext {
    getGitSha = { return "${System.properties['BUILD_NUMBER'] ?: '0'}".replaceAll('\r', '').replaceAll('\n', '') }
    getGitBranch = { return "${System.properties['BRANCH_NAME'] ?: 'unknown'}".replaceAll('\r', '').replaceAll('\n', '') }
    junitJupiter = '5.7.0'
    log4j2Version = '2.17.1'
    springfoxVersion = '3.0.0'
}

repositories {
    maven {
        credentials {
            username 'devops-user-development'
            password 'Dev.Nov$Nex$u$@2020'
        }
        url = 'https://nexus.novopayment.net/repository/maven-public/'
    }
    mavenLocal()
}

group = 'com.novo.microservices'
version = '1.0.0'
description = 'Plantilla Spring Boot NovoPayment'

java {
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

dependencyCheck {
    failBuildOnCVSS = 5
    failOnError = true
    suppressionFile = 'config/dependencyCheck/suppressions.xml'
    autoUpdate = true
    cveValidForHours = 1
    formats = [ReportGenerator.Format.HTML, ReportGenerator.Format.JUNIT, ReportGenerator.Format.XML]
    outputDirectory = "${buildDir}/reports/dependencyCheck"
    analyzers {
        nodeAudit {
            yarnEnabled = false
        }
        experimentalEnabled = true
        archiveEnabled = true
        jarEnabled = true
        centralEnabled = true
        nexusEnabled = true
        pyDistributionEnabled = false
        pyPackageEnabled = false
        rubygemsEnabled = false
        opensslEnabled = false
        nuspecEnabled = false
        assemblyEnabled = false
        cmakeEnabled = false
        autoconfEnabled = true
        composerEnabled = false
        nodeEnabled = false
        cocoapodsEnabled = false
        swiftEnabled = false
    }
}

sonarlint {
    ignoreFailures = false
    excludes {
    }
}

spotbugs {
    toolVersion.set('4.1.4')
    ignoreFailures.set(false)
    showStackTraces.set(true)
    showProgress.set(true)
    maxHeapSize.set('1g')
}

spotbugsMain {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs-main-${project.name}.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

spotbugsTest {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/test/spotbugs-test-${project.name}.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

configurations {
    compileOnly {
        canBeResolved = true
        extendsFrom annotationProcessor
    }

    all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'org.apache.logging.log4j') {
                details.useVersion "${log4j2Version}"
            }
        }
    }
}

test {
    testLogging {
        events TestLogEvent.FAILED,
            TestLogEvent.PASSED,
            TestLogEvent.SKIPPED
    }
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    maxHeapSize = '1G'
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    check.dependsOn jacocoTestCoverageVerification
}

jacoco {
    toolVersion = "0.8.6"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
    dependsOn test
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.login", "sonar-cicd-user"
        property "sonar.password", "sonar-cicd-pass"
        property "sonar.projectName", project.name
        property "sonar.projectKey", project.name
        property "sonar.projectDescription", project.description
        property "sonar.projectVersion", rootProject.version
        property "sonar.junit.reportPaths", "build/reports/test/test/junitXml"
        property 'sonar.exclusions', "**/com/novo/microservices/**/repository/entities/**"
    }
}

dependencies {
    implementation 'org.springframework:spring-core'
    implementation('org.springframework.boot:spring-boot-starter-webflux') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    implementation('org.springframework.boot:spring-boot-starter-log4j2')
    implementation('org.springframework.boot:spring-boot-starter-validation') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    implementation('org.springframework.boot:spring-boot-starter-actuator') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    implementation "io.springfox:springfox-spring-web:${springfoxVersion}"
    implementation "io.springfox:springfox-spring-webmvc:${springfoxVersion}"
    implementation "io.springfox:springfox-swagger2:${springfoxVersion}"
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
    implementation "io.springfox:springfox-boot-starter:3.0.0"
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation "org.hibernate.validator:hibernate-validator:6.0.2.Final"
    implementation "org.hibernate.validator:hibernate-validator-annotation-processor:6.0.2.Final"
    implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
    implementation 'com.novo.microservices.utils:novo-microservices-utils-security-encryption:3.0.0'
    implementation 'com.novo.microservices.utils:novo-microservices-utils-httpclients:3.0.0'
    implementation 'com.novo.microservices.utils:novo-microservices-utils-security-jwa:3.0.0'
    implementation 'com.novo.microservices.utils:novo-microservices-utils-configurations-loader:3.0.0'
    implementation 'com.novo.microservices.utils:novo-microservices-utils:3.1.0'
    implementation 'com.novo.microservices.utils:novo-microservices-utils-multi-tenant-repository:2.0.0'
    implementation 'com.nimbusds:nimbus-jose-jwt:9.1.2'
    implementation 'com.jparams:to-string-verifier:1.4.8'
    implementation 'org.projectlombok:lombok:1.18.10'
    implementation 'javax.json.bind:javax.json.bind-api:1.0'
    implementation 'org.eclipse:yasson:1.0'
    implementation 'org.glassfish:javax.json:1.1'
    implementation 'com.novo.utils:novo-security-encryption:2.0'
    implementation 'com.novo.utils:novo-utils-httpclients:2.0'
    implementation 'com.novo.utils:novo-security-jwa:2.0'
    implementation "io.springfox:springfox-boot-starter:3.0.0"
    implementation 'com.github.spotbugs:spotbugs-annotations:4.2.2'
    compileOnly 'com.google.code.findbugs:annotations:3.0.1'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.1'
    compileOnly('org.projectlombok:lombok')
    annotationProcessor('org.projectlombok:lombok')
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'
    implementation group: 'commons-io', name: 'commons-io', version: '2.7'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: "${log4j2Version}"
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: "${log4j2Version}"
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testCompileOnly('org.projectlombok:lombok')
    testAnnotationProcessor('org.projectlombok:lombok')
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.4.1'
    testImplementation("org.junit.platform:junit-platform-suite-api:1.7.0")
    testImplementation("org.junit.platform:junit-platform-runner:1.7.0")
    testImplementation("org.junit.jupiter:junit-jupiter-api:$junitJupiter")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitJupiter")
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.4.1'
    testImplementation 'com.jparams:to-string-verifier:1.4.8'
    testImplementation 'com.h2database:h2'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation(group: 'org.mock-server', name: 'mockserver-junit-jupiter', version: '5.11.2') {
        exclude group: 'jakarta.validation', module: 'jakarta.validation-api'
    }
}

bootJar {
    manifest {
        attributes(
            'Implementation-Title': project.description,
            'Implementation-Version': rootProject.version,
            'Built-By': 'Novopayment',
            'Built-JDK': System.getProperty('java.version'),
            'Build-Time': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'Build-Revision': "${getGitSha()}",
            'Build-Branch': "${getGitBranch()}",
        )

    }
}

publishing {
    publications {
        bootJava(MavenPublication) {
            artifact bootJar
            pom {
                name = project.name
                description = project.description
                url = 'operacionesit@novopayment.com/library'
                properties = [
                    'vendor': 'https://novopayment.com'
                ]
                licenses {
                    license {
                        name = 'Novopayment'
                        url = 'https://novopayment.com'
                    }
                }
                developers {
                    developer {
                        id = 'schancay'
                        name = 'Sergio Chancay'
                        email = 'schancay@novopayment.com'
                    }
                }
                scm {
                    connection = 'scm:git:git@code.novopayment.com:schancay/novo-netty-microservice.git'
                    developerConnection = 'scm:git:git@code.novopayment.com:schancay/novo-netty-microservice.git'
                    url = 'https://code.novopayment.com/'
                }
            }
        }
    }

    repositories {
        maven {
            credentials {
                username 'devops-user-development'
                password 'Dev.Nov$Nex$u$@2020'
            }
            url = 'https://nexus.novopayment.net/repository/maven-releases/'
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
